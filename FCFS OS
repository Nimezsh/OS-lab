#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

struct Process {
    int pid;   
    int bt;    
    int at;    
    int pr;   
};

// ---------- FCFS ----------
void fcfs(struct Process p[], int n) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    wt[0] = 0;

    for (int i = 1; i < n; i++) {
        wt[i] = p[i-1].bt + wt[i-1];
    }

    printf("\n--- FCFS Scheduling ---\n");
    for (int i = 0; i < n; i++) {
        tat[i] = p[i].bt + wt[i];
        total_wt += wt[i];
        total_tat += tat[i];
        printf("P%d: WT=%d, TAT=%d\n", p[i].pid, wt[i], tat[i]);
    }

    printf("Average WT = %.2f, Average TAT = %.2f\n",
           (float)total_wt/n, (float)total_tat/n);
}

void sjf(struct Process p[], int n) {
    struct Process temp;
    int wt[n], tat[n], total_wt = 0, total_tat = 0;

    
    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (p[i].bt > p[j].bt) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = p[i-1].bt + wt[i-1];
    }

    printf("\n--- SJF Scheduling ---\n");
    for (int i = 0; i < n; i++) {
        tat[i] = p[i].bt + wt[i];
        total_wt += wt[i];
        total_tat += tat[i];
        printf("P%d: WT=%d, TAT=%d\n", p[i].pid, wt[i], tat[i]);
    }

    printf("Average WT = %.2f, Average TAT = %.2f\n",
           (float)total_wt/n, (float)total_tat/n);
}


void priority_scheduling(struct Process p[], int n) {
    struct Process temp;
    int wt[n], tat[n], total_wt = 0, total_tat = 0;


    for (int i = 0; i < n-1; i++) {
        for (int j = i+1; j < n; j++) {
            if (p[i].pr > p[j].pr) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }

    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = p[i-1].bt + wt[i-1];
    }

    printf("\n--- Priority Scheduling ---\n");
    for (int i = 0; i < n; i++) {
        tat[i] = p[i].bt + wt[i];
        total_wt += wt[i];
        total_tat += tat[i];
        printf("P%d (Priority=%d): WT=%d, TAT=%d\n",
               p[i].pid, p[i].pr, wt[i], tat[i]);
    }

    printf("Average WT = %.2f, Average TAT = %.2f\n",
           (float)total_wt/n, (float)total_tat/n);
}

int main() {
    pid_t pid;
    int n = 3;

    struct Process proc[3] = {
        {1, 5, 0, 2},  
        {2, 3, 0, 1}, 
        {3, 8, 0, 3},
    };

    pid = fork();

    if (pid == 0) {
        
        printf("\nChild Process Running Scheduling Algorithms...\n");
        fcfs(proc, n);
        sjf(proc, n);
        priority_scheduling(proc, n);
    } 
    else if (pid > 0) {
        
        wait(NULL);
        printf("\nParent Process: Child finished execution.\n");
    } 
    else {
        printf("Fork failed!\n");
    }

    return 0;
}
